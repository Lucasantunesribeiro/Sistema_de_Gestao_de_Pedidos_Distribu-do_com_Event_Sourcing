services:
  # PostgreSQL Database - Main Database
  - type: pserv
    name: order-postgres-db
    env: docker
    plan: starter
    region: oregon
    databaseName: order_system_db
    databaseUser: order_system_user
    ipAllowList: []

  # Redis Instance
  - type: redis
    name: order-redis-cache
    plan: starter
    region: oregon
    ipAllowList: []

  # Order Service - Web Service
  - type: web
    name: order-service
    env: docker
    plan: starter
    region: oregon
    buildCommand: |
      cd shared-events && mvn clean install -DskipTests &&
      cd ../services/order-service && mvn clean package -DskipTests
    dockerfilePath: ./services/order-service/Dockerfile
    dockerContext: .
    healthCheckPath: /actuator/health
    preDeployCommand: |
      echo "Preparing Order Service deployment..."
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: order-postgres-db
          property: connectionString
      - key: DATABASE_USERNAME
        fromDatabase:
          name: order-postgres-db
          property: user
      - key: DATABASE_PASSWORD
        fromDatabase:
          name: order-postgres-db
          property: password
      - key: REDIS_URL
        fromService:
          type: redis
          name: order-redis-cache
          property: connectionString
      - key: MESSAGING_TYPE
        value: redis
      - key: SPRING_PROFILES_ACTIVE
        value: render
      - key: JAVA_OPTS
        value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"
      - key: PORT
        value: "8081"

  # Payment Service - Web Service
  - type: web
    name: payment-service
    env: docker
    plan: starter
    region: oregon
    buildCommand: |
      cd shared-events && mvn clean install -DskipTests &&
      cd ../services/payment-service && mvn clean package -DskipTests
    dockerfilePath: ./services/payment-service/Dockerfile
    dockerContext: .
    healthCheckPath: /actuator/health
    preDeployCommand: |
      echo "Preparing Payment Service deployment..."
    envVars:
      - key: REDIS_URL
        fromService:
          type: redis
          name: order-redis-cache
          property: connectionString
      - key: MESSAGING_TYPE
        value: redis
      - key: SPRING_PROFILES_ACTIVE
        value: render
      - key: JAVA_OPTS
        value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"
      - key: PORT
        value: "8082"

  # Inventory Service - Web Service
  - type: web
    name: inventory-service
    env: docker
    plan: starter
    region: oregon
    buildCommand: |
      cd shared-events && mvn clean install -DskipTests &&
      cd ../services/inventory-service && mvn clean package -DskipTests
    dockerfilePath: ./services/inventory-service/Dockerfile
    dockerContext: .
    healthCheckPath: /actuator/health
    preDeployCommand: |
      echo "Preparing Inventory Service deployment..."
    envVars:
      - key: REDIS_URL
        fromService:
          type: redis
          name: order-redis-cache
          property: connectionString
      - key: MESSAGING_TYPE
        value: redis
      - key: SPRING_PROFILES_ACTIVE
        value: render
      - key: JAVA_OPTS
        value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"
      - key: PORT
        value: "8083"

  # Query Service - Web Service
  - type: web
    name: order-query-service
    env: docker
    plan: starter
    region: oregon
    buildCommand: |
      cd shared-events && mvn clean install -DskipTests &&
      cd ../services/order-query-service && mvn clean package -DskipTests
    dockerfilePath: ./services/order-query-service/Dockerfile
    dockerContext: .
    healthCheckPath: /actuator/health
    preDeployCommand: |
      echo "Preparing Query Service deployment..."
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: order-postgres-db
          property: connectionString
      - key: DATABASE_USERNAME
        fromDatabase:
          name: order-postgres-db
          property: user
      - key: DATABASE_PASSWORD
        fromDatabase:
          name: order-postgres-db
          property: password
      - key: REDIS_URL
        fromService:
          type: redis
          name: order-redis-cache
          property: connectionString
      - key: MESSAGING_TYPE
        value: redis
      - key: SPRING_PROFILES_ACTIVE
        value: render
      - key: JAVA_OPTS
        value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"
      - key: PORT
        value: "8084"

  # Frontend - Static Site
  - type: web
    name: order-management-frontend
    env: static
    plan: starter
    region: oregon
    buildCommand: |
      cd frontend && npm ci && npm run build
    publishDir: ./frontend/dist
    pullRequestPreviewsEnabled: true
    envVars:
      - key: VITE_API_URL
        value: https://order-service.onrender.com
      - key: VITE_ORDER_SERVICE_URL
        value: https://order-service.onrender.com
      - key: VITE_PAYMENT_SERVICE_URL
        value: https://payment-service.onrender.com
      - key: VITE_INVENTORY_SERVICE_URL
        value: https://inventory-service.onrender.com
      - key: VITE_QUERY_SERVICE_URL
        value: https://order-query-service.onrender.com

# Database initialization scripts (run manually after first deploy)
databases:
  - name: order-postgres-db
    databaseName: order_system_db
    user: order_system_user