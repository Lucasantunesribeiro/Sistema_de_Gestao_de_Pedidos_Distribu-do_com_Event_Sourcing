spring:
  application:
    name: order-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
  
  # Database Configuration (Event Store)
  datasource:
    url: ${DATABASE_URL:jdbc:h2:mem:orderdb}
    username: ${DATABASE_USERNAME:sa}
    password: ${DATABASE_PASSWORD:}
    driver-class-name: ${DATABASE_DRIVER:org.h2.Driver}
    hikari:
      connection-timeout: 10000
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000

  # JPA Configuration (Event Sourcing optimized)
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: ${HIBERNATE_DIALECT:org.hibernate.dialect.H2Dialect}
        format_sql: false
        show_sql: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        cache:
          use_second_level_cache: false

  # H2 Console (for development)
  h2:
    console:
      enabled: true
      path: /h2-console

  # RabbitMQ Configuration
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    connection-timeout: 30000
    requested-heartbeat: 60
    publisher-confirm-type: correlated
    publisher-returns: true
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          multiplier: 2
        prefetch: 10
        concurrency: 2
        max-concurrency: 5

# Server Configuration
server:
  port: 8081
  servlet:
    context-path: /
  tomcat:
    threads:
      max: 200
      min-spare: 10
    connection-timeout: 20000

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    defaults:
      enabled: true
    db:
      enabled: true
    rabbit:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      service: order-service
      environment: ${SPRING_PROFILES_ACTIVE:local}

# Logging Configuration
logging:
  level:
    com.ordersystem.order: INFO
    org.springframework.amqp: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"

# JWT Configuration
jwt:
  secret: ${JWT_SECRET_KEY:defaultSecretForLocalDev}
  access-token-validity: ${JWT_ACCESS_TOKEN_VALIDITY:900000}  # 15 minutes
  refresh-token-validity: ${JWT_REFRESH_TOKEN_VALIDITY:604800000}  # 7 days

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      order-service:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        register-health-indicator: true
        
  retry:
    instances:
      order-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.SocketTimeoutException
          - java.net.ConnectException

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://order-db:5432/orderdb
    username: postgres
    password: password
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  rabbitmq:
    host: rabbitmq
    port: 5672

---
# Render Profile
spring:
  config:
    activate:
      on-profile: render
  datasource:
    url: ${DATABASE_URL:jdbc:h2:mem:orderdb}
    username: ${DATABASE_USERNAME:sa}
    password: ${DATABASE_PASSWORD:}
    driver-class-name: ${DATABASE_DRIVER:org.h2.Driver}
  jpa:
    properties:
      hibernate:
        dialect: ${HIBERNATE_DIALECT:org.hibernate.dialect.H2Dialect}
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}

logging:
  level:
    com.ordersystem.order: INFO

---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 30
      minimum-idle: 10
  jpa:
    properties:
      hibernate:
        dialect: org.postgresql.dialect.PostgreSQLDialect
        show_sql: false
        format_sql: false
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}

logging:
  level:
    com.ordersystem.order: WARN
    org.springframework: WARN