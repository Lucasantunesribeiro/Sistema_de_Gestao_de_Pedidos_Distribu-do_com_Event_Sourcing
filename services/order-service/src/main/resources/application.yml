spring:
  application:
    name: order-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}
  
  # Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/order_db}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      # Otimizações para 1000 req/sec
      connection-timeout: 10000
      maximum-pool-size: 25
      minimum-idle: 10
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000
      pool-name: OrderServiceHikariCP
      register-mbeans: true
      # Performance monitoring
      validation-timeout: 5000
      initialization-fail-timeout: 10000
      # Connection properties otimizadas
      connection-test-query: SELECT 1
      auto-commit: false

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        show_sql: false
        connection:
          provider_disables_autocommit: true
        jdbc:
          batch_size: 20
          order_inserts: true
          order_updates: true
        cache:
          use_second_level_cache: false

  # RabbitMQ Configuration
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    connection-timeout: 30000
    requested-heartbeat: 60
    publisher-confirm-type: correlated
    publisher-returns: true
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          multiplier: 2
        prefetch: 10
        concurrency: 1
        max-concurrency: 5

# Server Configuration
server:
  port: 8081
  servlet:
    context-path: /api/orders
  tomcat:
    threads:
      max: 200
      min-spare: 10
    connection-timeout: 20000
    max-connections: 8192

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    defaults:
      enabled: true
    db:
      enabled: true
    rabbit:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    # Connection Pool Monitoring
    hikaricp:
      enabled: true
    tags:
      service: order-service
      environment: ${SPRING_PROFILES_ACTIVE:local}

# Logging Configuration
logging:
  level:
    com.ordersystem.order: INFO
    org.springframework.amqp: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] - %msg%n"
  file:
    name: logs/order-service.log
    max-size: 10MB
    max-history: 30

# Application Specific Configuration
app:
  database:
    # Configurações otimizadas para performance
    maximum-pool-size: 25
    minimum-idle: 10
    connection-timeout: 10s
    idle-timeout: 5m
    max-lifetime: 20m
    leak-detection-threshold: 60s
    # Novas configurações de monitoring
    pool-usage-threshold: 70
    connection-acquire-increment: 2
  
  rabbitmq:
    connection-timeout: 30s
    requested-heartbeat: 60s
    channel-cache-size: 25
    publisher-confirms: true
    publisher-returns: true
    max-retry-attempts: 3
    initial-interval: 1s
    multiplier: 2.0
    max-interval: 10s
  
  resilience:
    max-retries: 3
    initial-delay: 1s
    max-delay: 30s
    backoff-multiplier: 2.0
    failure-threshold: 5
    circuit-breaker-timeout: 1m
    database-connection-timeout: 20s
    rabbitmq-connection-timeout: 30s
    health-check-interval: 30s
    health-check-failure-threshold: 3
  
  # Saga Configuration for Persistent State Management
  saga:
    # Recovery Service Configuration
    recovery:
      enabled: true
      timeout-minutes: 5
      max-retries: 3
      cleanup-days: 30
      batch-size: 100
      
    # Performance Targets
    performance:
      target-completion-rate: 99.9
      max-duration-minutes: 10
      alert-threshold-minutes: 5
      
    # Monitoring Configuration
    monitoring:
      enabled: true
      metrics-interval: 30s
      health-check-interval: 60s
      detailed-logging: false

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://order-db:5432/order_db

logging:
  level:
    com.ordersystem.order: DEBUG

---
# Railway Profile
spring:
  config:
    activate:
      on-profile: railway
  datasource:
    hikari:
      # Otimizações Railway para produção
      maximum-pool-size: 30
      minimum-idle: 15
      connection-timeout: 8000
      validation-timeout: 3000
  
logging:
  level:
    com.ordersystem.order: INFO
    org.springframework.web: WARN