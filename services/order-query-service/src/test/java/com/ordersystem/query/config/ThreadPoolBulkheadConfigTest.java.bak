package com.ordersystem.query.config;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.test.context.junit.jupiter.SpringJUnitExtension;

import java.util.concurrent.Executor;
import java.util.concurrent.ThreadPoolExecutor;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Tests for bulk-head pattern thread pool configuration
 * Validates isolation between different service types
 */
@ExtendWith(SpringJUnitExtension.class)
@SpringBootTest(classes = {ThreadPoolBulkheadConfig.class})
class ThreadPoolBulkheadConfigTest {

    @Autowired
    @Qualifier("payment-executor")
    private Executor paymentExecutor;

    @Autowired
    @Qualifier("inventory-executor")
    private Executor inventoryExecutor;

    @Autowired
    @Qualifier("database-executor")
    private Executor databaseExecutor;

    @Autowired
    @Qualifier("query-executor")
    private Executor queryExecutor;

    @Test
    void shouldConfigurePaymentExecutorCorrectly() {
        // Given
        ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) paymentExecutor;
        
        // When & Then
        assertThat(executor.getCorePoolSize()).isEqualTo(5);
        assertThat(executor.getMaxPoolSize()).isEqualTo(10);
        assertThat(executor.getQueueCapacity()).isEqualTo(25);
        assertThat(executor.getThreadNamePrefix()).isEqualTo("payment-");
        assertThat(executor.getRejectedExecutionHandler())
            .isInstanceOf(ThreadPoolExecutor.CallerRunsPolicy.class);
    }

    @Test
    void shouldConfigureInventoryExecutorCorrectly() {
        // Given
        ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) inventoryExecutor;
        
        // When & Then
        assertThat(executor.getCorePoolSize()).isEqualTo(8);
        assertThat(executor.getMaxPoolSize()).isEqualTo(15);
        assertThat(executor.getQueueCapacity()).isEqualTo(50);
        assertThat(executor.getThreadNamePrefix()).isEqualTo("inventory-");
    }

    @Test
    void shouldConfigureDatabaseExecutorCorrectly() {
        // Given
        ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) databaseExecutor;
        
        // When & Then
        assertThat(executor.getCorePoolSize()).isEqualTo(10);
        assertThat(executor.getMaxPoolSize()).isEqualTo(20);
        assertThat(executor.getQueueCapacity()).isEqualTo(100);
        assertThat(executor.getThreadNamePrefix()).isEqualTo("database-");
    }

    @Test
    void shouldConfigureQueryExecutorCorrectly() {
        // Given
        ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) queryExecutor;
        
        // When & Then
        assertThat(executor.getCorePoolSize()).isEqualTo(15);
        assertThat(executor.getMaxPoolSize()).isEqualTo(30);
        assertThat(executor.getQueueCapacity()).isEqualTo(200);
        assertThat(executor.getThreadNamePrefix()).isEqualTo("query-");
    }

    @Test
    void shouldHaveDistinctExecutorsForIsolation() {
        // When & Then
        assertThat(paymentExecutor).isNotSameAs(inventoryExecutor);
        assertThat(paymentExecutor).isNotSameAs(databaseExecutor);
        assertThat(paymentExecutor).isNotSameAs(queryExecutor);
        assertThat(inventoryExecutor).isNotSameAs(databaseExecutor);
        assertThat(inventoryExecutor).isNotSameAs(queryExecutor);
        assertThat(databaseExecutor).isNotSameAs(queryExecutor);
    }

    @Test
    void shouldProvideProperThreadPoolMetrics() {
        // Given
        ThreadPoolTaskExecutor paymentExec = (ThreadPoolTaskExecutor) paymentExecutor;
        ThreadPoolTaskExecutor inventoryExec = (ThreadPoolTaskExecutor) inventoryExecutor;
        
        // When
        paymentExec.getThreadPoolExecutor().prestartAllCoreThreads();
        inventoryExec.getThreadPoolExecutor().prestartAllCoreThreads();
        
        // Then
        assertThat(paymentExec.getActiveCount()).isGreaterThanOrEqualTo(0);
        assertThat(inventoryExec.getActiveCount()).isGreaterThanOrEqualTo(0);
        assertThat(paymentExec.getPoolSize()).isEqualTo(5);
        assertThat(inventoryExec.getPoolSize()).isEqualTo(8);
    }
}