package com.ordersystem.query.config;

import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringJUnitExtension;

import java.time.Duration;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Tests for optimized circuit breaker configuration
 * Validates per-service tuning based on SLA requirements
 */
@ExtendWith(SpringJUnitExtension.class)
@SpringBootTest(classes = {CircuitBreakerOptimizedConfig.class})
class CircuitBreakerOptimizedConfigTest {

    @Autowired
    private CircuitBreakerRegistry circuitBreakerRegistry;

    @Test
    void shouldConfigurePaymentServiceCircuitBreaker() {
        // Given
        CircuitBreaker paymentCircuitBreaker = circuitBreakerRegistry.circuitBreaker("payment-service");
        
        // When
        CircuitBreakerConfig config = paymentCircuitBreaker.getCircuitBreakerConfig();
        
        // Then
        assertThat(config.getSlidingWindowSize()).isEqualTo(20);
        assertThat(config.getFailureRateThreshold()).isEqualTo(30.0f);
        assertThat(config.getWaitDurationInOpenState()).isEqualTo(Duration.ofSeconds(10));
        assertThat(config.getPermittedNumberOfCallsInHalfOpenState()).isEqualTo(5);
        assertThat(config.getMinimumNumberOfCalls()).isEqualTo(10);
        assertThat(config.getSlowCallDurationThreshold()).isEqualTo(Duration.ofSeconds(3));
        assertThat(config.getSlowCallRateThreshold()).isEqualTo(50.0f);
    }

    @Test
    void shouldConfigureInventoryServiceCircuitBreaker() {
        // Given
        CircuitBreaker inventoryCircuitBreaker = circuitBreakerRegistry.circuitBreaker("inventory-service");
        
        // When
        CircuitBreakerConfig config = inventoryCircuitBreaker.getCircuitBreakerConfig();
        
        // Then
        assertThat(config.getSlidingWindowSize()).isEqualTo(15);
        assertThat(config.getFailureRateThreshold()).isEqualTo(40.0f);
        assertThat(config.getWaitDurationInOpenState()).isEqualTo(Duration.ofSeconds(5));
        assertThat(config.getSlowCallDurationThreshold()).isEqualTo(Duration.ofSeconds(1));
    }

    @Test
    void shouldConfigureDatabaseCircuitBreaker() {
        // Given
        CircuitBreaker databaseCircuitBreaker = circuitBreakerRegistry.circuitBreaker("database");
        
        // When
        CircuitBreakerConfig config = databaseCircuitBreaker.getCircuitBreakerConfig();
        
        // Then
        assertThat(config.getSlidingWindowSize()).isEqualTo(30);
        assertThat(config.getFailureRateThreshold()).isEqualTo(20.0f);
        assertThat(config.getWaitDurationInOpenState()).isEqualTo(Duration.ofSeconds(30));
    }

    @Test
    void shouldHaveCustomFailurePredicateForPaymentService() {
        // Given
        CircuitBreaker paymentCircuitBreaker = circuitBreakerRegistry.circuitBreaker("payment-service");
        
        // When
        CircuitBreakerConfig config = paymentCircuitBreaker.getCircuitBreakerConfig();
        
        // Then
        assertThat(config.getRecordFailurePredicate()).isNotNull();
    }

    @Test
    void shouldProvideHealthCheckIntegration() {
        // Given
        CircuitBreaker paymentCircuitBreaker = circuitBreakerRegistry.circuitBreaker("payment-service");
        
        // When
        CircuitBreaker.State state = paymentCircuitBreaker.getState();
        
        // Then
        assertThat(state).isEqualTo(CircuitBreaker.State.CLOSED);
        assertThat(paymentCircuitBreaker.getMetrics()).isNotNull();
    }

    @Test
    void shouldConfigureAllRequiredCircuitBreakers() {
        // When
        var circuitBreakers = circuitBreakerRegistry.getAllCircuitBreakers();
        
        // Then
        assertThat(circuitBreakers)
            .extracting(CircuitBreaker::getName)
            .containsExactlyInAnyOrder("payment-service", "inventory-service", "database");
    }
}