package com.ordersystem.query.monitoring;

import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import io.github.resilience4j.circuitbreaker.event.CircuitBreakerOnStateTransitionEvent;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Gauge;
import io.micrometer.core.instrument.MeterRegistry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;

import jakarta.annotation.PostConstruct;

/**
 * Circuit Breaker Metrics for monitoring and alerting
 * Provides comprehensive metrics for circuit breaker state and performance
 */
@Component
public class CircuitBreakerMetrics {

    private static final Logger log = LoggerFactory.getLogger(CircuitBreakerMetrics.class);

    private final MeterRegistry meterRegistry;
    private final CircuitBreakerRegistry circuitBreakerRegistry;

    @Autowired
    public CircuitBreakerMetrics(MeterRegistry meterRegistry, CircuitBreakerRegistry circuitBreakerRegistry) {
        this.meterRegistry = meterRegistry;
        this.circuitBreakerRegistry = circuitBreakerRegistry;
    }

    @PostConstruct
    public void bindMetrics() {
        log.info("Binding circuit breaker metrics to MeterRegistry");
        
        circuitBreakerRegistry.getAllCircuitBreakers().forEach(this::bindCircuitBreakerMetrics);
        
        // Listen for new circuit breakers
        circuitBreakerRegistry.getEventPublisher()
            .onEntryAdded(event -> bindCircuitBreakerMetrics(event.getAddedEntry()));
    }

    private void bindCircuitBreakerMetrics(CircuitBreaker circuitBreaker) {
        String name = circuitBreaker.getName();
        log.debug("Binding metrics for circuit breaker: {}", name);

        // Circuit breaker state gauge (0=CLOSED, 1=OPEN, 2=HALF_OPEN, 3=FORCED_OPEN, 4=DISABLED)
        Gauge.builder("circuit_breaker_state")
            .description("Circuit breaker state (0=CLOSED, 1=OPEN, 2=HALF_OPEN, 3=FORCED_OPEN, 4=DISABLED)")
            .tag("name", name)
            .register(meterRegistry, circuitBreaker, cb -> getStateValue(cb.getState()));

        // Failure rate percentage
        Gauge.builder("circuit_breaker_failure_rate")
            .description("Circuit breaker failure rate percentage")
            .tag("name", name)
            .register(meterRegistry, circuitBreaker, cb -> cb.getMetrics().getFailureRate());

        // Slow call rate percentage
        Gauge.builder("circuit_breaker_slow_call_rate")
            .description("Circuit breaker slow call rate percentage")
            .tag("name", name)
            .register(meterRegistry, circuitBreaker, cb -> cb.getMetrics().getSlowCallRate());

        // Number of successful calls
        Gauge.builder("circuit_breaker_successful_calls")
            .description("Number of successful calls")
            .tag("name", name)
            .register(meterRegistry, circuitBreaker, cb -> cb.getMetrics().getNumberOfSuccessfulCalls());

        // Number of failed calls
        Gauge.builder("circuit_breaker_failed_calls")
            .description("Number of failed calls")
            .tag("name", name)
            .register(meterRegistry, circuitBreaker, cb -> cb.getMetrics().getNumberOfFailedCalls());

        // Number of slow calls
        Gauge.builder("circuit_breaker_slow_calls")
            .description("Number of slow calls")
            .tag("name", name)
            .register(meterRegistry, circuitBreaker, cb -> cb.getMetrics().getNumberOfSlowCalls());

        // Not permitted calls (when circuit is open)
        Gauge.builder("circuit_breaker_not_permitted_calls")
            .description("Number of not permitted calls when circuit is open")
            .tag("name", name)
            .register(meterRegistry, circuitBreaker, cb -> cb.getMetrics().getNumberOfNotPermittedCalls());

        // Register counters for call outcomes
        Counter.builder("circuit_breaker_calls_total")
            .description("Total calls through circuit breaker")
            .tag("name", name)
            .tag("outcome", "success")
            .register(meterRegistry);

        Counter.builder("circuit_breaker_calls_total")
            .description("Total calls through circuit breaker")
            .tag("name", name)
            .tag("outcome", "failure")
            .register(meterRegistry);

        Counter.builder("circuit_breaker_calls_total")
            .description("Total calls through circuit breaker")
            .tag("name", name)
            .tag("outcome", "slow")
            .register(meterRegistry);

        // Listen for events to increment counters
        circuitBreaker.getEventPublisher()
            .onSuccess(event -> {
                log.debug("Circuit breaker {} - successful call", name);
                meterRegistry.counter("circuit_breaker_calls_total",
                    "name", name, "outcome", "success").increment();
            })
            .onError(event -> {
                log.debug("Circuit breaker {} - failed call: {}", name, event.getThrowable().getMessage());
                meterRegistry.counter("circuit_breaker_calls_total",
                    "name", name, "outcome", "failure").increment();
            })
            .onCallNotPermitted(event -> {
                log.debug("Circuit breaker {} - call not permitted", name);
                meterRegistry.counter("circuit_breaker_calls_total",
                    "name", name, "outcome", "not_permitted").increment();
            })
            .onSlowCallRateExceeded(event -> {
                log.warn("Circuit breaker '{}' slow call rate exceeded: {}%", name, event.getSlowCallRate());
                meterRegistry.counter("circuit_breaker_slow_calls_exceeded_total",
                    "name", name).increment();
            })
            .onFailureRateExceeded(event -> {
                log.warn("Circuit breaker '{}' failure rate exceeded: {}%", name, event.getFailureRate());
                meterRegistry.counter("circuit_breaker_failure_rate_exceeded_total",
                    "name", name).increment();
            });
    }

    /**
     * Handle circuit breaker state transition events
     */
    @EventListener
    public void handleCircuitBreakerStateChange(CircuitBreakerOnStateTransitionEvent event) {
        String name = event.getCircuitBreakerName();
        CircuitBreaker.StateTransition transition = event.getStateTransition();
        
        log.info("Circuit breaker '{}' changed from {} to {}", 
            name, transition.getFromState(), transition.getToState());

        // Track state transitions
        meterRegistry.counter("circuit_breaker_state_transitions_total",
            "name", name,
            "from_state", transition.getFromState().toString(),
            "to_state", transition.getToState().toString())
            .increment();

        // Alert on critical state changes
        if (transition.getToState() == CircuitBreaker.State.OPEN) {
            log.error("ALERT: Circuit breaker '{}' opened due to failures", name);
            meterRegistry.counter("circuit_breaker_opened_total", "name", name).increment();
        } else if (transition.getToState() == CircuitBreaker.State.CLOSED && 
                  transition.getFromState() == CircuitBreaker.State.HALF_OPEN) {
            log.info("Circuit breaker '{}' recovered and closed", name);
            meterRegistry.counter("circuit_breaker_recovered_total", "name", name).increment();
        }
    }

    /**
     * Convert circuit breaker state to numeric value for monitoring
     */
    public double getStateValue(CircuitBreaker.State state) {
        switch (state) {
            case CLOSED:
                return 0;
            case OPEN:
                return 1;
            case HALF_OPEN:
                return 2;
            case FORCED_OPEN:
                return 3;
            case DISABLED:
                return 4;
            default:
                return -1;
        }
    }

    /**
     * Get circuit breaker health summary for monitoring dashboard
     */
    public CircuitBreakerHealthSummary getHealthSummary() {
        CircuitBreakerHealthSummary summary = new CircuitBreakerHealthSummary();
        
        circuitBreakerRegistry.getAllCircuitBreakers().forEach(cb -> {
            String name = cb.getName();
            CircuitBreaker.State state = cb.getState();
            CircuitBreaker.Metrics metrics = cb.getMetrics();
            
            CircuitBreakerHealthInfo info = new CircuitBreakerHealthInfo();
            info.setName(name);
            info.setState(state.toString());
            info.setFailureRate(metrics.getFailureRate());
            info.setSlowCallRate(metrics.getSlowCallRate());
            info.setSuccessfulCalls(metrics.getNumberOfSuccessfulCalls());
            info.setFailedCalls(metrics.getNumberOfFailedCalls());
            info.setNotPermittedCalls(metrics.getNumberOfNotPermittedCalls());
            
            summary.addCircuitBreaker(info);
            
            if (state == CircuitBreaker.State.OPEN) {
                summary.incrementOpenCircuits();
            }
        });
        
        return summary;
    }

    /**
     * Circuit breaker health summary for dashboard
     */
    public static class CircuitBreakerHealthSummary {
        private int totalCircuitBreakers = 0;
        private int openCircuits = 0;
        private java.util.List<CircuitBreakerHealthInfo> circuitBreakers = new java.util.ArrayList<>();
        
        public void addCircuitBreaker(CircuitBreakerHealthInfo info) {
            circuitBreakers.add(info);
            totalCircuitBreakers++;
        }
        
        public void incrementOpenCircuits() {
            openCircuits++;
        }
        
        public boolean isHealthy() {
            return openCircuits == 0;
        }
        
        // Getters and setters
        public int getTotalCircuitBreakers() { return totalCircuitBreakers; }
        public int getOpenCircuits() { return openCircuits; }
        public java.util.List<CircuitBreakerHealthInfo> getCircuitBreakers() { return circuitBreakers; }
    }

    /**
     * Individual circuit breaker health info
     */
    public static class CircuitBreakerHealthInfo {
        private String name;
        private String state;
        private float failureRate;
        private float slowCallRate;
        private long successfulCalls;
        private long failedCalls;
        private long notPermittedCalls;
        
        // Getters and setters
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }
        public String getState() { return state; }
        public void setState(String state) { this.state = state; }
        public float getFailureRate() { return failureRate; }
        public void setFailureRate(float failureRate) { this.failureRate = failureRate; }
        public float getSlowCallRate() { return slowCallRate; }
        public void setSlowCallRate(float slowCallRate) { this.slowCallRate = slowCallRate; }
        public long getSuccessfulCalls() { return successfulCalls; }
        public void setSuccessfulCalls(long successfulCalls) { this.successfulCalls = successfulCalls; }
        public long getFailedCalls() { return failedCalls; }
        public void setFailedCalls(long failedCalls) { this.failedCalls = failedCalls; }
        public long getNotPermittedCalls() { return notPermittedCalls; }
        public void setNotPermittedCalls(long notPermittedCalls) { this.notPermittedCalls = notPermittedCalls; }
    }
}