# Deploy Production Railway - Windows PowerShell Script
# Sistema de Gest√£o de Pedidos Distribu√≠do
# üöÄ PRODUCTION DEPLOYMENT AUTOMATION

Write-Host "üöÄ INICIANDO DEPLOYMENT RAILWAY - Sistema de Gest√£o de Pedidos" -ForegroundColor Green
Write-Host "=================================================================" -ForegroundColor Cyan

# Verificar se Railway CLI est√° instalado
Write-Host "üìã 1. Verificando Railway CLI..." -ForegroundColor Yellow
try {
    $railwayVersion = railway --version 2>$null
    if ($railwayVersion) {
        Write-Host "‚úÖ Railway CLI encontrado: $railwayVersion" -ForegroundColor Green
    } else {
        throw "Railway CLI n√£o encontrado"
    }
} catch {
    Write-Host "‚ùå Railway CLI n√£o instalado!" -ForegroundColor Red
    Write-Host "üì• Instalando Railway CLI..." -ForegroundColor Yellow
    
    # Instalar Railway CLI via npm
    try {
        npm install -g @railway/cli
        Write-Host "‚úÖ Railway CLI instalado com sucesso!" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erro ao instalar Railway CLI. Instale manualmente:" -ForegroundColor Red
        Write-Host "   npm install -g @railway/cli" -ForegroundColor White
        Write-Host "   ou baixe de: https://railway.app/cli" -ForegroundColor White
        exit 1
    }
}

# Verificar autentica√ß√£o Railway
Write-Host "üîê 2. Verificando autentica√ß√£o Railway..." -ForegroundColor Yellow
try {
    $railwayStatus = railway status 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "üîë Fazendo login no Railway..." -ForegroundColor Yellow
        railway login
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Erro no login Railway. Execute manualmente: railway login" -ForegroundColor Red
            exit 1
        }
    }
    Write-Host "‚úÖ Autenticado no Railway!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro na autentica√ß√£o Railway" -ForegroundColor Red
    exit 1
}

# Verificar projeto Railway
Write-Host "üìÅ 3. Configurando projeto Railway..." -ForegroundColor Yellow
try {
    # Tentar obter informa√ß√µes do projeto atual
    $projectInfo = railway status 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "üÜï Criando novo projeto Railway..." -ForegroundColor Yellow
        railway init
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Erro ao criar projeto Railway" -ForegroundColor Red
            exit 1
        }
    }
    Write-Host "‚úÖ Projeto Railway configurado!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro na configura√ß√£o do projeto" -ForegroundColor Red
    exit 1
}

# Build shared-events primeiro
Write-Host "üîß 4. Building shared-events library..." -ForegroundColor Yellow
Set-Location "shared-events"
try {
    mvn clean install -DskipTests -q
    if ($LASTEXITCODE -ne 0) {
        throw "Erro no build shared-events"
    }
    Write-Host "‚úÖ Shared-events built successfully!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro no build shared-events: $_" -ForegroundColor Red
    Set-Location ".."
    exit 1
}
Set-Location ".."

# Deploy services na ordem correta
$services = @(
    @{name="order-service"; port=8081},
    @{name="payment-service"; port=8082}, 
    @{name="inventory-service"; port=8083},
    @{name="order-query-service"; port=8084}
)

Write-Host "üöÄ 5. Deploying microsservi√ßos..." -ForegroundColor Yellow
foreach ($service in $services) {
    Write-Host "   üì¶ Deploying $($service.name)..." -ForegroundColor Cyan
    Set-Location "services\$($service.name)"
    
    try {
        # Build do servi√ßo
        mvn clean package -DskipTests -q
        if ($LASTEXITCODE -ne 0) {
            throw "Erro no build de $($service.name)"
        }
        
        # Deploy no Railway
        railway up --detach
        if ($LASTEXITCODE -ne 0) {
            throw "Erro no deploy de $($service.name)"
        }
        
        Write-Host "   ‚úÖ $($service.name) deployed!" -ForegroundColor Green
    } catch {
        Write-Host "   ‚ùå Erro no deploy de $($service.name): $_" -ForegroundColor Red
        Set-Location "..\..\"
        exit 1
    }
    
    Set-Location "..\..\"
}

# Deploy Frontend
Write-Host "üé® 6. Deploying Frontend React..." -ForegroundColor Yellow
Set-Location "frontend"
try {
    # Install dependencies se necess√°rio
    if (!(Test-Path "node_modules")) {
        npm install
    }
    
    # Build production
    npm run build
    if ($LASTEXITCODE -ne 0) {
        throw "Erro no build do frontend"
    }
    
    # Deploy no Railway
    railway up --detach
    if ($LASTEXITCODE -ne 0) {
        throw "Erro no deploy do frontend"
    }
    
    Write-Host "‚úÖ Frontend deployed!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro no deploy do frontend: $_" -ForegroundColor Red
    Set-Location ".."
    exit 1
}
Set-Location ".."

# Aguardar deployments
Write-Host "‚è≥ 7. Aguardando deployments finalizarem..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Validar deployments
Write-Host "üîç 8. Validando deployments..." -ForegroundColor Yellow
try {
    $deployments = railway status
    Write-Host "$deployments" -ForegroundColor White
} catch {
    Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel obter status dos deployments" -ForegroundColor Yellow
}

# Exibir URLs
Write-Host "`nüåê DEPLOYMENT CONCLU√çDO!" -ForegroundColor Green
Write-Host "=======================================" -ForegroundColor Cyan
Write-Host "üéâ Sistema de Gest√£o de Pedidos deployed com sucesso!" -ForegroundColor Green
Write-Host "`nüì± Para acessar seus servi√ßos:" -ForegroundColor Yellow
Write-Host "   railway open" -ForegroundColor White
Write-Host "`nüìä Para monitorar:" -ForegroundColor Yellow  
Write-Host "   railway logs" -ForegroundColor White
Write-Host "`nüîß Para gerenciar:" -ForegroundColor Yellow
Write-Host "   railway status" -ForegroundColor White

Write-Host "`n‚ú® DEPLOYMENT RAILWAY CONCLU√çDO COM SUCESSO! ‚ú®" -ForegroundColor Green
Write-Host "Sistema est√° rodando em produ√ß√£o no Railway.app" -ForegroundColor Cyan