name: Render Deploy CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  MAVEN_OPTS: '-Xmx2g -Xms1g -Dmaven.repo.local=$HOME/.m2/repository'

jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'eclipse-temurin'
        java-version: ${{ env.JAVA_VERSION }}
        cache: 'maven'

    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Verify Maven and Java versions
      run: |
        java -version
        mvn -version

    - name: Build shared events library
      run: |
        echo "üîß Building shared events library..."
        cd shared-events
        mvn clean install -DskipTests -B
        echo "‚úÖ Shared events library built successfully"

    - name: Run Java integration tests with Redis
      env:
        TEST_REDIS_URL: redis://localhost:6379
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379
        SPRING_PROFILES_ACTIVE: test
      run: |
        echo "üß™ Running Java tests with Redis integration..."
        mvn test -B
        echo "‚úÖ Java tests completed successfully"

    - name: Generate test report
      if: always()
      run: |
        echo "üìä Generating test reports..."
        find . -name "surefire-reports" -type d | head -5

    - name: Install frontend dependencies
      run: |
        echo "üì¶ Installing frontend dependencies..."
        cd frontend
        npm ci
        echo "‚úÖ Frontend dependencies installed"

    - name: Run frontend linting
      run: |
        echo "üîç Running frontend linting..."
        cd frontend
        npm run lint
        echo "‚úÖ Frontend linting passed"

    - name: Run frontend tests
      run: |
        echo "üß™ Running frontend tests..."
        cd frontend
        npm run test
        echo "‚úÖ Frontend tests completed"

    - name: Build frontend production bundle
      run: |
        echo "üèóÔ∏è Building frontend for production..."
        cd frontend
        npm run build
        echo "‚úÖ Frontend build completed"
        ls -la dist/

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          **/target/surefire-reports/
          frontend/coverage/
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'sistema-gestao-pedidos'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --scan './services/'
          --scan './frontend/'
          --out './reports'
    
    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports
        retention-days: 7

    - name: Security Report Summary
      if: always()
      run: |
        echo "üîí Security scan completed"
        if [ -f reports/dependency-check-report.xml ]; then
          echo "üìã Security report generated successfully"
        else
          echo "‚ö†Ô∏è Security report not found"
        fi

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        echo "üê≥ Building Docker image..."
        docker build -t sistema-pedidos:${{ github.sha }} .
        echo "‚úÖ Docker image built successfully"

    - name: Test Docker container startup
      run: |
        echo "üß™ Testing Docker container startup..."
        
        # Start container in background
        docker run -d --name test-container \
          -e PORT=8080 \
          -p 8080:8080 \
          sistema-pedidos:${{ github.sha }}
        
        # Wait for services to start (increased timeout for multi-service container)
        echo "‚è≥ Waiting for services to start..."
        sleep 60
        
        # Test health endpoint
        echo "üîç Testing health endpoint..."
        for i in {1..5}; do
          if curl -f http://localhost:8080/health; then
            echo "‚úÖ Health check passed on attempt $i"
            break
          else
            echo "‚ö†Ô∏è Health check failed on attempt $i"
            if [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              docker logs test-container
              exit 1
            fi
            sleep 15
          fi
        done
        
        # Test frontend endpoint
        echo "üîç Testing frontend endpoint..."
        if curl -f http://localhost:8080/; then
          echo "‚úÖ Frontend endpoint accessible"
        else
          echo "‚ö†Ô∏è Frontend endpoint not accessible"
          docker logs test-container
        fi

    - name: Docker container logs
      if: always()
      run: |
        echo "üìã Container logs:"
        docker logs test-container || true

    - name: Clean up test container
      if: always()
      run: |
        echo "üßπ Cleaning up test container..."
        docker stop test-container || true
        docker rm test-container || true

    - name: Test Docker image size
      run: |
        echo "üìä Docker image size analysis:"
        docker images sistema-pedidos:${{ github.sha }} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

  performance-test:
    name: Performance Baseline
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js for performance testing
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Run basic performance checks
      run: |
        echo "‚ö° Running performance baseline checks..."
        
        # Check frontend bundle size
        cd frontend
        npm ci
        npm run build
        
        BUNDLE_SIZE=$(du -sk dist | cut -f1)
        echo "üì¶ Frontend bundle size: ${BUNDLE_SIZE}KB"
        
        if [ $BUNDLE_SIZE -gt 2048 ]; then
          echo "‚ö†Ô∏è Bundle size exceeds 2MB threshold"
        else
          echo "‚úÖ Bundle size within acceptable range"
        fi

  deploy-notify:
    name: Deploy Notification
    runs-on: ubuntu-latest
    needs: [docker-build, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy Success Notification
      run: |
        echo "üöÄ Deploy Pipeline Completed Successfully!"
        echo "=================================="
        echo "‚úÖ All tests passed"
        echo "‚úÖ Security scan completed"
        echo "‚úÖ Docker image built and tested"
        echo "‚úÖ Performance checks passed"
        echo ""
        echo "üéØ Render auto-deploy triggered from main branch"
        echo "üìä Monitor deploy at: https://dashboard.render.com"
        echo "üîó Commit SHA: ${{ github.sha }}"
        echo "üë§ Author: ${{ github.actor }}"
        echo "üìù Commit message: ${{ github.event.head_commit.message }}"

    - name: Create deployment badge
      run: |
        echo "üè∑Ô∏è Deployment Status: ‚úÖ READY" >> $GITHUB_STEP_SUMMARY
        echo "üìÖ Deploy Time: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "üîó Commit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY

  rollback-check:
    name: Rollback Readiness
    runs-on: ubuntu-latest
    needs: [deploy-notify]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Rollback Instructions
      run: |
        echo "üö® DEPLOYMENT FAILED - ROLLBACK REQUIRED"
        echo "========================================"
        echo ""
        echo "To rollback manually:"
        echo "1. Go to Render Dashboard: https://dashboard.render.com"
        echo "2. Navigate to your service"
        echo "3. Go to 'Deploys' tab"
        echo "4. Click 'Rollback' on the last successful deploy"
        echo ""
        echo "Or use Render CLI:"
        echo "render deploy rollback <service-id> <previous-deploy-id>"
        echo ""
        echo "‚ùå Failed commit: ${{ github.sha }}"
        echo "üë§ Author: ${{ github.actor }}"