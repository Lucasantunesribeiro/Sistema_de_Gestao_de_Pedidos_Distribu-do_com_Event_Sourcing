name: Render Deploy Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build shared-events
        run: |
          cd shared-events
          mvn clean install -DskipTests -B

      - name: Run Java tests
        run: |
          mvn clean test -B
        env:
          SPRING_PROFILES_ACTIVE: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          DATABASE_URL: jdbc:postgresql://localhost:5432/test_db
          DB_USERNAME: test_user
          DB_PASSWORD: test_pass

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Java artifacts
        run: |
          mvn clean package -DskipTests -B

      - name: Verify build artifacts
        run: |
          echo "=== JAR Files ==="
          find . -name "*.jar" -path "*/target/*" | grep -v -E "(test|original)" || true
          echo "=== Frontend Build ==="
          ls -la frontend/dist/ || echo "Frontend dist not found"

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: gestao-pedidos:latest
          outputs: type=docker,dest=/tmp/gestao-pedidos.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker load --input /tmp/gestao-pedidos.tar
          
          # Test web service
          docker run --rm -e SERVICE_TYPE=web -e PORT=8080 \
            gestao-pedidos:latest timeout 30s /app/startup.sh || true
            
          # Test worker services
          for service in order payment inventory; do
            echo "Testing $service service..."
            docker run --rm -e SERVICE_TYPE=$service \
              gestao-pedidos:latest timeout 10s /app/startup.sh || true
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: /tmp/gestao-pedidos.tar
          retention-days: 1

  notify-deploy:
    runs-on: ubuntu-latest
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: Deploy notification
        run: |
          echo "âœ… Build successful! Ready for Render deployment"
          echo "ðŸš€ Services: 1 web + 3 workers"
          echo "ðŸ“¦ Artifacts: Java services + React frontend"
          echo "ðŸ”— Deploy URL: https://dashboard.render.com/services"