name: CI/CD - Build, Test and Deploy

on:
  push:
    branches: [ main, fix/* ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22'
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m -Dmaven.repo.local=.m2/repository'

jobs:
  # Unit Tests - Fast fail with Redis service
  unit-tests:
    name: 'Unit Tests (Fail Fast)'
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build all modules first
      run: mvn -B -DskipTests=true package

    - name: Run unit tests - Order Query Service
      run: |
        cd services/order-query-service
        mvn -Dtest=CacheInvalidationServiceTest test -q
      env:
        SPRING_REDIS_HOST: 127.0.0.1
        SPRING_REDIS_PORT: 6379

  # Integration Tests - With external dependencies  
  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request' || contains(github.ref, 'refs/heads/main')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build shared events
      run: |
        cd shared-events
        mvn clean install -DskipTests

    # Test backend services with dependencies
    - name: Test Order Service
      run: |
        cd services/order-service
        mvn test
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/test_db
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        MESSAGING_TYPE: redis

    - name: Test Payment Service
      run: |
        cd services/payment-service
        mvn test
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        MESSAGING_TYPE: redis

    - name: Test Inventory Service
      run: |
        cd services/inventory-service
        mvn test
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        MESSAGING_TYPE: redis

    - name: Test Query Service
      run: |
        cd services/order-query-service
        mvn test
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/test_db
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        MESSAGING_TYPE: redis

    # Frontend tests and build
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test

    - name: Type check frontend
      run: |
        cd frontend
        npm run type-check

    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: https://order-service.onrender.com

    # Build backend artifacts for deployment
    - name: Build backend services
      run: |
        cd services/order-service && mvn clean package -DskipTests
        cd ../payment-service && mvn clean package -DskipTests
        cd ../inventory-service && mvn clean package -DskipTests
        cd ../order-query-service && mvn clean package -DskipTests

  # Deploy Job - Only runs on main branch pushes
  deploy:
    name: 'Deploy to Render'
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Render CLI
      run: |
        curl -fsSL https://cli.render.com/install | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Deploy to Render
      run: |
        echo "Starting deployment to Render..."
        
        # Deploy services in dependency order
        echo "Deploying database and Redis..."
        render deploy --service-id=${{ secrets.RENDER_POSTGRES_SERVICE_ID }} --wait
        render deploy --service-id=${{ secrets.RENDER_REDIS_SERVICE_ID }} --wait
        
        echo "Deploying backend services..."
        render deploy --service-id=${{ secrets.RENDER_ORDER_SERVICE_ID }} --wait &
        render deploy --service-id=${{ secrets.RENDER_PAYMENT_SERVICE_ID }} --wait &
        render deploy --service-id=${{ secrets.RENDER_INVENTORY_SERVICE_ID }} --wait &
        wait
        
        echo "Deploying query service..."
        render deploy --service-id=${{ secrets.RENDER_QUERY_SERVICE_ID }} --wait
        
        echo "Deploying frontend..."
        render deploy --service-id=${{ secrets.RENDER_FRONTEND_SERVICE_ID }} --wait
        
        echo "Deployment completed successfully!"
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

  # Smoke Tests - Post-deploy validation
  smoke-tests:
    name: 'Smoke Tests - Production'
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Wait for Render deployment stabilization
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 120

    - name: Test Order Service Health
      run: |
        echo "Testing Order Service health..."
        for i in {1..5}; do
          if curl -f --retry 3 --retry-delay 5 --max-time 30 "https://order-service.onrender.com/actuator/health"; then
            echo "✅ Order Service healthy"
            break
          fi
          echo "⏳ Retry $i/5 for Order Service..."
          sleep 30
          if [ $i -eq 5 ]; then
            echo "❌ Order Service health check failed"
            exit 1
          fi
        done
        
    - name: Test Payment Service Health  
      run: |
        echo "Testing Payment Service health..."
        for i in {1..5}; do
          if curl -f --retry 3 --retry-delay 5 --max-time 30 "https://payment-service.onrender.com/actuator/health"; then
            echo "✅ Payment Service healthy"
            break
          fi
          echo "⏳ Retry $i/5 for Payment Service..."
          sleep 30
          if [ $i -eq 5 ]; then
            echo "❌ Payment Service health check failed"
            exit 1
          fi
        done
        
    - name: Test Inventory Service Health
      run: |
        echo "Testing Inventory Service health..."
        for i in {1..5}; do
          if curl -f --retry 3 --retry-delay 5 --max-time 30 "https://inventory-service.onrender.com/actuator/health"; then
            echo "✅ Inventory Service healthy"
            break
          fi
          echo "⏳ Retry $i/5 for Inventory Service..."
          sleep 30
          if [ $i -eq 5 ]; then
            echo "❌ Inventory Service health check failed"
            exit 1
          fi
        done
        
    - name: Test Query Service Health
      run: |
        echo "Testing Query Service health..."
        for i in {1..5}; do
          if curl -f --retry 3 --retry-delay 5 --max-time 30 "https://order-query-service.onrender.com/actuator/health"; then
            echo "✅ Query Service healthy"  
            break
          fi
          echo "⏳ Retry $i/5 for Query Service..."
          sleep 30
          if [ $i -eq 5 ]; then
            echo "❌ Query Service health check failed"
            exit 1
          fi
        done
        
    - name: Test Frontend
      run: |
        echo "Testing Frontend availability..."
        for i in {1..5}; do
          if curl -f --retry 3 --retry-delay 5 --max-time 30 -I "https://order-management-frontend.onrender.com"; then
            echo "✅ Frontend healthy"
            break
          fi
          echo "⏳ Retry $i/5 for Frontend..."
          sleep 30
          if [ $i -eq 5 ]; then
            echo "❌ Frontend health check failed"
            exit 1
          fi
        done

    - name: Run Basic Integration Tests
      run: |
        echo "Running basic integration smoke tests..."
        
        # Test order creation flow
        echo "Testing order creation..."
        ORDER_RESPONSE=$(curl -s -w "%{http_code}" -X POST "https://order-service.onrender.com/api/orders" \
          -H "Content-Type: application/json" \
          -d '{
            "customerId": "smoke-test-customer",
            "items": [
              {"productId": "smoke-test-product", "quantity": 1, "price": 10.0}
            ]
          }')
        
        if [[ "$ORDER_RESPONSE" =~ 200|201 ]]; then
          echo "✅ Order creation test passed"
        else
          echo "❌ Order creation test failed: $ORDER_RESPONSE"
          exit 1
        fi
        
        # Test query service
        echo "Testing query service..."
        QUERY_RESPONSE=$(curl -s -w "%{http_code}" "https://order-query-service.onrender.com/api/orders")
        
        if [[ "$QUERY_RESPONSE" =~ 200 ]]; then
          echo "✅ Query service test passed"
        else
          echo "❌ Query service test failed: $QUERY_RESPONSE"
          exit 1
        fi
        
        echo "🎉 All smoke tests passed!"

  # Rollback Job - Manual trigger only
  rollback:
    name: 'Rollback Deployment'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || failure()
    
    steps:
    - name: Install Render CLI
      run: |
        curl -fsSL https://cli.render.com/install | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Rollback Services
      run: |
        echo "🔄 Rolling back services to previous version..."
        
        # Rollback in reverse dependency order
        echo "Rollback frontend..."
        render service rollback ${{ secrets.RENDER_FRONTEND_SERVICE_ID }} || true
        
        echo "Rollback query service..."
        render service rollback ${{ secrets.RENDER_QUERY_SERVICE_ID }} || true
        
        echo "Rollback backend services..."
        render service rollback ${{ secrets.RENDER_ORDER_SERVICE_ID }} || true
        render service rollback ${{ secrets.RENDER_PAYMENT_SERVICE_ID }} || true
        render service rollback ${{ secrets.RENDER_INVENTORY_SERVICE_ID }} || true
        
        echo "✅ Rollback completed!"
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

    - name: Post-Rollback Health Check
      run: |
        echo "Checking services after rollback..."
        sleep 60
        
        # Quick health check after rollback
        for service in order-service payment-service inventory-service order-query-service; do
          if curl -f "https://$service.onrender.com/actuator/health" &>/dev/null; then
            echo "✅ $service healthy after rollback"
          else
            echo "⚠️ $service still having issues after rollback"
          fi
        done

  # Cleanup old deployments
  cleanup:
    name: 'Cleanup Old Deployments'
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: success()
    
    steps:
    - name: Install Render CLI
      run: |
        curl -fsSL https://cli.render.com/install | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Cleanup old deployments
      run: |
        echo "🧹 Cleaning up old deployments..."
        # Keep last 5 deployments per service
        services=(${{ secrets.RENDER_ORDER_SERVICE_ID }} ${{ secrets.RENDER_PAYMENT_SERVICE_ID }} ${{ secrets.RENDER_INVENTORY_SERVICE_ID }} ${{ secrets.RENDER_QUERY_SERVICE_ID }} ${{ secrets.RENDER_FRONTEND_SERVICE_ID }})
        
        for service_id in "${services[@]}"; do
          echo "Cleaning up service: $service_id"
          render service cleanup $service_id --keep=5 || echo "⚠️ Cleanup failed for $service_id"
        done
        echo "✅ Cleanup completed!"
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}