# Multi-stage Dockerfile for unified frontend + backend deployment
# Stage 1: Build shared events
FROM maven:3.9.8-eclipse-temurin-17 AS shared-builder
WORKDIR /app
COPY pom.xml ./
COPY shared-events/ shared-events/
RUN cd shared-events && mvn clean install -DskipTests -B

# Stage 2: Build all Java services  
FROM maven:3.9.8-eclipse-temurin-17 AS java-builder
WORKDIR /app

# Copy Maven repository from shared-builder
COPY --from=shared-builder /root/.m2/repository /root/.m2/repository

# Copy Maven configuration files for cache optimization
COPY pom.xml ./
COPY shared-events/ shared-events/
COPY services/order-service/pom.xml services/order-service/
COPY services/payment-service/pom.xml services/payment-service/
COPY services/inventory-service/pom.xml services/inventory-service/
COPY services/order-query-service/pom.xml services/order-query-service/

# Download dependencies for cache layer
RUN mvn -B -f pom.xml -DskipTests dependency:resolve

# Copy source code
COPY services/ services/

# Build all services
RUN mvn -B -f pom.xml clean package -DskipTests

# Stage 3: Use pre-built frontend to avoid esbuild Docker conflicts
FROM alpine:latest AS frontend-provider
WORKDIR /app/frontend
# Copy pre-built frontend from host (user must run 'npm run build' locally first)
COPY frontend/dist ./dist

# Stage 4: Runtime environment with Nginx + Java services
FROM eclipse-temurin:17-jdk-alpine
RUN apk add --no-cache nginx supervisor curl

# Create directories
RUN mkdir -p /app/services /app/frontend /var/log/supervisor /etc/supervisor/conf.d

# Copy built JAR files
COPY --from=java-builder /app/services/order-service/target/*.jar /app/services/order-service.jar
COPY --from=java-builder /app/services/payment-service/target/*.jar /app/services/payment-service.jar  
COPY --from=java-builder /app/services/inventory-service/target/*.jar /app/services/inventory-service.jar
COPY --from=java-builder /app/services/order-query-service/target/*.jar /app/services/query-service.jar

# Copy pre-built frontend from host
COPY --from=frontend-provider /app/frontend/dist /app/frontend

# Create Nginx configuration inline
RUN echo 'worker_processes auto;\npid /run/nginx.pid;\nevents {\n    worker_connections 1024;\n}\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    server {\n        listen 80;\n        root /app/frontend;\n        index index.html;\n        location / {\n            try_files $uri $uri/ /index.html;\n        }\n        location /api/ {\n            proxy_pass http://localhost:8081;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n        }\n        location /actuator/ {\n            proxy_pass http://localhost:8081;\n        }\n        location /health {\n            return 200 "{\\"status\\": \\"UP\\", \\"services\\": [\\"order-service\\", \\"payment-service\\", \\"inventory-service\\", \\"query-service\\"], \\"frontend\\": \\"React 18 + TypeScript\\", \\"message\\": \\"Sistema funcionando!\\"}";\n            add_header Content-Type application/json;\n        }\n    }\n}' > /etc/nginx/nginx.conf

# Copy canonical supervisor configuration
COPY deploy/supervisord/supervisord.conf /etc/supervisor/supervisord.conf
RUN chmod 644 /etc/supervisor/supervisord.conf

# Validate supervisord.conf contains required [supervisord] section
RUN grep -q '^\[supervisord\]' /etc/supervisor/supervisord.conf || (echo "ERROR: supervisord.conf missing [supervisord]" && cat /etc/supervisor/supervisord.conf && false)

EXPOSE 80
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s CMD curl -f http://localhost/health || exit 1
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]