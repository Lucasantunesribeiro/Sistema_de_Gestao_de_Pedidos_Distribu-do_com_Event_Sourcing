# Multi-stage Dockerfile template for microservices
# Usage: Replace {SERVICE_NAME} with actual service name (order-service, payment-service, etc.)

# Stage 1: Build shared-events
FROM maven:3.9-openjdk-17 AS shared-builder
WORKDIR /app

# Copy parent pom and shared-events
COPY pom.xml .
COPY shared-events/ ./shared-events/

# Build and install shared-events to local repository
RUN cd shared-events && mvn clean install -DskipTests

# Stage 2: Build service
FROM maven:3.9-openjdk-17 AS service-builder
WORKDIR /app

# Copy from shared-events builder
COPY --from=shared-builder /root/.m2 /root/.m2

# Copy parent pom
COPY pom.xml .

# Copy service source
COPY services/{SERVICE_NAME}/ ./services/{SERVICE_NAME}/

# Build service
RUN cd services/{SERVICE_NAME} && mvn clean package -DskipTests

# Stage 3: Runtime
FROM openjdk:17-jdk-slim

# Install curl for health checks
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy jar file
COPY --from=service-builder /app/services/{SERVICE_NAME}/target/*.jar app.jar

# Change ownership
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port (will be overridden by specific service)
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=3 \
    CMD curl -f http://localhost:8080/api/{SERVICE_PATH}/health || exit 1

# JVM options for containerized environment
ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication"

# Run application
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]